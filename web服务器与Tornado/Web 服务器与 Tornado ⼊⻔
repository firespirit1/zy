# Web 服务器与 Tornado ⼊⻔

## ⼀、HTTP 服务器的真相

HTTP 协议是建⽴在 TCP 协议之上的短连接协议。
它利⽤了 TCP 协议的可靠性，⽤来传输超⽂本 (HTML)，通信⼀次连接⼀次，通信完成后 TCP 连接关
闭。
所以如果想创建⼀个 HTTP Server 需要通过 Socket 搭建⼀个 服务端程序。

Web服务器

#### HTTP 协议

- 短连接：构建在长连接基础之上的短连接协议，类似于短信或者qq

#### TCP:

- 建立连接：三次握手
- 断开连接：四次挥手
- 可靠
- 长连接协议：类似电话通信
- HTTP Server

### 1.最简单的 HTTP Server

```
#!/usr/bin/env python   #shell脚本的开头

import socket


addr = ('127.0.0.1', 8000)
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  # 创建 socket 对象
sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)  # 为 sock 打开地址可重用选项
sock.bind(addr)   # 绑定服务器地址
sock.listen(100)  # 设置监听队列

# 定义 "响应报文"
html = b'''
HTTP/1.1 200 OK

<html>
    <head>
        <title>home</title>
    </head>
    <body>
        Hello world
    </body>
</html>
'''

while True:
    print('服务器已运行，正在等待客户端连接。。。')

    # 等待接受客户端连接
    # 第一个返回值是客户端的 socket 对象
    # 第二个返回值是客户端的地址
    cli_sock, cli_addr = sock.accept()
    print('接收到来自客户端 %s:%s 的连接' % cli_addr)

    # 接收客户端传来的数据，1024是接收缓冲区的大小
    cli_data = cli_sock.recv(1024)
    print('接收到客户端发来的 "请求报文": \n%s' % cli_data.decode('utf8'))

    cli_sock.sendall(html)  # 向客户端发送数据

    # 断开与客户端的连接
    cli_sock.close()
    print('连接断开, 退出！')


```



#### 例子：

```
#!/usr/bin/env python

import socket
import time

addr = ('127.0.0.1', 8000)
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  # 创建 socket 对象
sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)  # 为 sock 打开地址可重用选项
sock.bind(addr)   # 绑定服务器地址
sock.listen(100)  # 设置监听队列

# 定义 "响应报文"
template = '''
HTTP/1.1 200 OK

<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />

        <title>Seamile</title>

        <style>
            h1, p {
                text-align: center;
                font-size: 2.5em;
            }
            .avatar {
                border-radius: 20px;
                box-shadow: 5px 5px 20px grey;
                width: 500px;
                margin: 0 auto;
                display: block;
            }
        </style>
    </head>
    <body>
        <h1>Seamile</h1>
        <div><img class="avatar" src="https://inews.gtimg.com/newsapp_ls/0/10229330043_294195/0" /></div>
        <p>%s</p>
    </body>
</html>
'''


def get_url(request_str):
    '''从 "请求报文" 中获取请求的 URL'''
    first_line = request_str.split('\n')[0]  # 取出第一行
    url = first_line.split(' ')[1]  # 按空格切分，取出中间的 URL
    return url


while True:
    print('服务器已运行，正在等待客户端连接。。。')

    # 等待接受客户端连接
    # 第一个返回值是客户端的 socket 对象
    # 第二个返回值是客户端的地址
    cli_sock, cli_addr = sock.accept()
    print('接收到来自客户端 %s:%s 的连接' % cli_addr)

    # 接收客户端传来的数据，1024是接收缓冲区的大小
    cli_request = cli_sock.recv(1024).decode('utf8')
    print('接收到客户端发来的 "请求报文": \n%s' % cli_request)

    # 获取用户的 URL
    url = get_url(cli_request)

    # 根据 URL 生成不同的返回值
    if url == '/foo':
        response = template % '爱妃退下，朕在调戏代码'
    elif url == '/bar':
        response = template % '姜伟老师没醉过，但求一醉'
    else:
        response = template % 'hello world'

    print(url, response)
    cli_sock.sendall(response.encode('utf8'))  # 向客户端发送数据

    # 断开与客户端的连接
    cli_sock.close()
    print('连接断开, 退出！')

```

### 2.对 SimpleServer 进⾏扩展

1. 根据不同 URL 显示不同⻚⾯
2. ⻚⾯整体样式不变，根据不同参数，从数据库中取出不同学⽣信息，并填充到⻚⾯中

## ⼆、Web 框架概述

随着技术的发展，我们每天的要处理的信息量都在爆炸新的增加。传统的静态⻚⾯技术早已跟不上时代
需求，因⽽催⽣了动态⻚⾯技术。
所谓动态⻚⾯，即所有的⻚⾯⽤程序来⽣成，以细节实现上的不同，⼜可分为“前端动态⻚⾯”和“后端动
态⻚⾯”。
我们在 Web 前端阶段所学 Ajax、VUE 等技术，就是前端动态⻚⾯。⽽今后我们所学的主要是后端动态
⻚⾯技术，甚⾄是两者结合使⽤。

### 1.Web服务器原理

第⼀⼩节的 SimpleServer 虽然代码仅仅 30 多⾏，但已经包含了⼀个⼩型 Web 系统的核⼼。
⼀个完备的 Web 系统如下图所示:

![1568027889273](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1568027889273.png)

### 	2.常见的Web框架

如果想完成更复杂的功能，还需要深⼊开发很多东⻄，⽐如模版系统、ORM系统、路由系统、会话机
制……
好在这些基础且通⽤的东⻄已经被很多前辈开发完成，我们没有必要再造轮⼦。他们按照⾃⼰的⽤途和
想法，将各种系统开发、组合，最终为我们提供了各种各样的 Web 框架。

![1568028143054](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1568028143054.png)

## Tornado入门

Tornado 是有 FriendFeed 公司开发的 Web 框架，该公司已经于 2009 年被 Facebook 收购，原本的
FriendFeed 已经成为了 Facebook 的⼀部分。
Tornado 最⼤的特点就是他实现了⼀个 “异步⾮阻塞” 的 HTTP Server，性能⾮常优异。

### 1. 安装

```
pip install tornado
```

### 2. Hello World

```
import tornado.ioloop
import tornado.web
class MainHandler(tornado.web.RequestHandler):
 	def get(self):
 		self.write("Hello, world")
def make_app():
 	return tornado.web.Application([
 		(r"/", MainHandler),   #'/'代表根路径
 	])
if __name__ == "__main__":
 	app = make_app()
 	app.listen(8888)
 	tornado.ioloop.IOLoop.current().start()  #驱动协程
```

> ioloop是tornado的关键，是他的最底层,实现异步处理的相关操作。
>
> ioloop就是对I/O多路复用的封装，它实现了一个单例，将这个单例保存在IOLoop._instance中
>
> ioloop实现了Reactor模型，将所有要处理的I/O事件注册到一个中心I/O多路复用器上，同时主线程/进程阻塞在多路复用器上；一旦有I/O事件到来或是准备就绪(文件描述符或socket可读、写)，多路复用器返回并将事先注册的相应I/O事件分发到对应的处理器中。
>
> 另外，ioloop还被用来集中运行回调函数以及集中处理定时任务。
>
> web  和web以及http通信相关的全都定义在tornado.web当中。
>
> RequestHandler：请求处理器
>
> get：http的get方法
>
> 



### 3.启动参数

```
#option：选项  parse_command_line：是一个函数，解析命令行参数  define：定义参数 option：具体的参数
from tornado.options import parse_command_line, define, options

define("host", default='0.0.0.0', help="主机地址", type=str) #0.0.0.0 绑定当前机器的所有地址，web可以开到这个地址上，但是数据库只能放在内网。
define("port", default=8888, help="主机端⼝", type=int)
parse_command_line()
print('你传⼊的 host: %s' % options.host)
print('你传⼊的 port: %s' % options.port)
```

>  改变主机地址： ./demo.py --host=127.0.0.1   只能本地访问，绑定的是本地回环的地址，其他人访问不了
>
> vim /etc/hosts  记录的本机内部的一些域名
>
> 可以自定义一些域名  格式：ip地址    名称

### 4.路由处理 

```
import tornado.ioloop
from tornado.web import RequestHandler,Application
class HomeHandler(tornado.web.RequestHandler):
	def get(self):
		self.write("欢迎进入主页")
class BookHandler(tornado.web.RequestHandler):
	def get(self):
		self.write("你想看的书应有尽有")
		
app = Application([
 ('/', HomeHandler),
 ('/book/', BookHandler), #'/book/'是一个url
])
app.listen(8000) #listen有两个参数，第一个为端口号，第二个是ip地址，默认是本机
tornado.ioloop.IOLoop.current().start()		
```

> url:主机资源定位
>
> web传参在url传参  格式 ？参数1&参数2   &。。。

### 5.处理 GET 和 POST 请求

```
class TestPostHandler(tornado.web.RequestHandler):
    def get(self):
        html = '''
            <form action="/test/post" method="POST">
            姓名: <input type="text" name="name">
            <br>
            城市: <input type="text" name="city">
            <input type="submit">
            </form>
        '''
        self.write(html)

    def post(self):
        name = self.get_argument('name')
        city = self.get_argument('city')

        self.write('%s 生活在 %s' % (name, city))
```

> get_argument()获取参数
>
> url 直接访问是访问到的是get函数 

HTTP 的请求⽅法:

![1568031449040](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1568031449040.png)

> post使用情况：一般是要对服务器的内容进行修改（一般用 put）或者创建新内容：比如修改数据库内容等等
>
> get：从服务器获取信息。
>
> put：对post的细化，主要是修改服务器的某些内容时使用